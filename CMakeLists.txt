#
#    This file is part of Spectre, an open-source physically based
#    spectral raytracing library.
#   
#    Copyright (c) 2020-2023 Samuel Van Allen - All rights reserved.
#   
#    Spectre is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#   
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#    GNU General Public License for more details.
#   
#    You should have received a copy of the GNU General Public License
#    along with this program. If not, see <http://www.gnu.org/licenses/>.
#   

cmake_minimum_required (VERSION "3.8")

# =========================================================================== #
#                     PROJECT DEFINITIONS & PROPERTIES                        #
# =========================================================================== #

# Setup the name of the solution. This will change some of the directories naming convention
# generated by CMake. Ignore CXX in the second param since CMake supports C++ by default
project (Spectre)
set_property(DIRECTORY PROPERTY VS_STARTUP_PROJECT ${PROJECT_NAME})

# Sets the C++ versions
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# =========================================================================== #
#                         USER CONFIGURABLE OPTIONS                           #
# =========================================================================== #

option(USE_AVX_2 "Use AVX-2" OFF)


# =========================================================================== #
#                        ADD SOURCE FILES TO PROJECT                          #
# =========================================================================== #

include_directories("${CMAKE_SOURCE_DIR}/src")
include_directories("${CMAKE_SOURCE_DIR}/include")

file(GLOB_RECURSE project_headers src/*.h)
file(GLOB_RECURSE project_cpps src/*.cpp)
set(all_files ${project_headers} ${project_cpps})
source_group(TREE ${CMAKE_SOURCE_DIR} FILES ${all_files})

# =========================================================================== #
#                          SET COMPILATION TARGETS                            #
# =========================================================================== #

add_library(${PROJECT_NAME} STATIC ${all_files})
set_target_properties(${PROJECT_NAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY $<1:${CMAKE_CURRENT_SOURCE_DIR}/bin>)

# =========================================================================== #
#                            PRECOMPILED HEADERS                              #
# =========================================================================== #

target_precompile_headers(${PROJECT_NAME} PUBLIC src/pch.h)


# =========================================================================== #
#                        PLATFORM SPECIFIC SETTIGNS                           #
# =========================================================================== #

# Define platform
if(WIN32)
    target_compile_definitions(${PROJECT_NAME} PUBLIC SPC_PLATFORM_WIN)
    # Enable multi-threaded compilation on Windows
    include(ProcessorCount)
    ProcessorCount(N)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP${N}")
    # Ignore C26451 warnings because they are annoying
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd26451")
elseif(APPLE)
    target_compile_definitions(${PROJECT_NAME} PUBLIC SPC_PLATFORM_MAC)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread")
elseif(UNIX)
    target_compile_definitions(${PROJECT_NAME} PUBLIC SPC_PLATFORM_LINUX)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread")
endif()

if (USE_AVX_2)
    target_compile_definitions(${PROJECT_NAME} PUBLIC SPC_USE_AVX_2)
    if(WIN32)
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /arch:AVX2")
    elseif(APPLE)
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mavx2")
    elseif(UNIX)
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mavx2")
    endif()
endif()




# =========================================================================== #
#                             INCLUDE SUBPROJECTS                             #
# =========================================================================== #

add_subdirectory(tests)
add_subdirectory(standalone)

